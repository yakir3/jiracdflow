[uwsgi]
;uid = www-data
;gid = www-data

;base = /var/www/
base = /opt/
project = jiracdflow

chdir = %(base)/%(project)
;home = %(base)/venv
module = %(project).wsgi:application

master = True
processes = 4
threads = 10
;env = LANG=en_US.UTF-8

# 映射静态文件路径
static-map = /static=%(chdir)/static

# 选项1, 使用unix socket与nginx通信，仅限于uwsgi和nginx在同一主机上情形
# Nginx配置中uwsgi_pass应指向同一socket文件
;socket=/run/uwsgi/%(project).sock
;chown-socket = %(uid):%(gid)
;chmod-socket = 664

# 选项2，使用TCP socket与nginx通信
# Nginx配置中uwsgi_pass应指向uWSGI服务器IP和端口
;socket = 0.0.0.0:8080

# 选项3，使用http协议与nginx通信
# Nginx配置中proxy_pass应指向uWSGI服务器一IP和端口
http=0.0.0.0:8080


# 进程文件
pidfile = logs/uwsgi.pid
# 以 daemon 进程运行，保存 log
daemonize = logs/uwsgi.log
# 服务停止时，自动移除 unix socket 和 pid 文件
vacuum = True
# 设置单个工作进程请求数上限。当处理的请求总数超过这个量，进程回收重启。
max-requests = 5000
# 设置单个请求超时时间
harakiri = 600
# 请求被 harakiri 杀掉时输出一条日志
harakiri-verbose = true
# uWsgi 默认的 buffersize 为4096，请求数据超过这个量会报错
buffer-size = 65536
# http 请求体大小超过指定的限制，打开 http body 缓冲
post-buffering = 65536
# 开启内存使用情况报告
memory-report = true
# 设置平滑的重启（直到处理完接收到的请求）的长等待时间(秒)
reload-mercy = 60
# 设置工作进程使用虚拟内存超过多少 MB 就回收重启
reload-on-as = 2048
