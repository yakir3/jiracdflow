[uwsgi]
;uid = tomcat
;gid = tomcat
project = jiracdflow

# 设置项目工作根目录
chdir = /opt/jiracdflow
;chdir = /app
# 项目环境虚拟环境目录，Docker 部署时不需要
;home = %(base)/venv
# wsgi文件位置
module = %(project).wsgi:application
;wsgi-file = %(project)/uwsgi.ini

master = True
processes = 4
threads = 10
;env = LANG=en_US.UTF-8

# 映射静态文件路径
static-map = /static=%(chdir)/static

# 选项1, 使用unix socket与nginx通信，仅限于uwsgi和nginx在同一主机上情形
# Nginx配置中uwsgi_pass应指向同一socket文件
;socket=/run/uwsgi/%(project).sock
# 选项2，使用TCP socket与nginx通信
# Nginx配置中uwsgi_pass应指向uWSGI服务器IP和端口
;socket = 0.0.0.0:8080
# 选项3，使用http协议与nginx通信
# Nginx配置中proxy_pass应指向uWSGI服务器一IP和端口
http=0.0.0.0:8080

# socket权限设置
;chown-socket = %(uid):%(gid)
;chmod-socket = 664

# 进程文件
pidfile = logs/uwsgi.pid
# 以后台守护进程运行，并将log日志存于temp文件夹。
daemonize = logs/uwsgi.log
# 服务停止时，自动移除unix socket和pid文件
vacuum = True
# 为每个工作进程设置请求数的上限。当处理的请求总数超过这个量，进程回收重启。
max-requests = 5000
# 当一个请求花费的时间超过这个时间，那么这个请求都会被丢弃。
harakiri = 600
#当一个请求被harakiri杀掉时输出一条日志
harakiri-verbose = true
# uWsgi默认的buffersize为4096，如果请求数据超过这个量会报错。这里设置为64k
buffer-size = 65536
# 如果http请求体的大小超过指定的限制，打开http body缓冲，这里为64k
post-buffering = 65536
#开启内存使用情况报告
memory-report = true
#设置平滑的重启（直到处理完接收到的请求）的长等待时间(秒)
reload-mercy = 60
#设置工作进程使用虚拟内存超过多少MB就回收重启
reload-on-as=2048
